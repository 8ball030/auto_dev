version: "3.8"
services:
  tendermint: &tendermint
    user: "1000"
    mem_limit: 1024m
    mem_reservation: 256M
    cpus: 0.5
    container_name: tm_0
    hostname: tm_0
    image: "valory/open-autonomy-tendermint:0.15.2"
    restart: always
    network_mode: ${NETWORK_MODE}
    environment:
      - ID=0
      - TMHOME=/tendermint/node0
      - CREATE_EMPTY_BLOCKS=true
      - DEV_MODE=0
      - LOG_FILE=node_0.txt
      - LOG_LEVEL=INFO
      - WRITE_TO_LOG=true
      - HOST_NAME=${HOST_NAME}
    working_dir: /tendermint
    command:
      - /bin/sh
      - -c
      - |
        # Try each port using Python socket binding
        python3 - << 'PYEOF' > /tmp/port.txt
        import socket
        import errno
        ports = [8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095]
        for p in ports:
            try:
                print(f"\nTesting port {p}...")
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.bind(('127.0.0.1', p))
                s.close()
                print(f"Port {p} is available (bind succeeded)")
                print(p)  # This will be captured in the port variable
                break
            except socket.error as e:
                if e.errno == errno.EADDRINUSE:
                    print(f"Port {p} is in use (Address already in use)")
                else:
                    print(f"Port {p} error: {e} (errno={e.errno})")
        PYEOF

        port=$$(grep -oE '^[0-9]+$$' /tmp/port.txt | tail -n 1)
        if [ -z "$$port" ]; then
            echo "No ports available"
            exit 1
        fi

        # Set proxy app for Tendermint
        export PROXY_APP="tcp://${HOST_NAME}:$$port"

        # Start Flask and Tendermint
        exec flask run --no-reload --host=0.0.0.0 --port=$$port
    ports:
      - 8080:8080
      - 26656:26656
      - 26657:26657
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - tendermint:/tendermint/
    depends_on:
      - "tendermint-init"
    healthcheck:
      test: ["CMD", "bash", "-c", "port=$$(cat /tmp/port.txt) && curl -f http://127.0.0.1:$$port/"]
      interval: 10s
      timeout: 10s
      retries: 3

  tendermint-init:
    <<: *tendermint
    container_name: tm_reset
    hostname: tm_reset
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "rm -rf /tendermint/node0 && mkdir -p /tendermint/node0 && tendermint init validator && chown -R 1000:1000 /tendermint/ && echo 'reset done'"
    restart: "no"
    user: "0"
    depends_on: []
    ports: []

volumes:
  tendermint:
