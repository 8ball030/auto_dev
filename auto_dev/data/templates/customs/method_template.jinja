    def {{ method_name }}(self, message: ApiHttpMessage{% for param in path_params_snake_case %}, {{ param }}{% endfor %}{% if method|lower in ['post', 'put', 'patch', 'delete'] %}, body{% endif %}):
        {% raw %}"""{% endraw %}Handle {{ method|upper }} request for {{ path }}.{% raw %}"""{% endraw %}
{%- if path_params_snake_case %}
        self.context.logger.debug(f"Path parameters: {% for param in path_params_snake_case %}{{ param }}={{ '{' }}{{ param }}{{ '}' }}{% if not loop.last %}, {% endif %}{% endfor %}")
{%- endif %}
{%- if method|lower in ['post', 'put', 'patch', 'delete'] %}
        self.context.logger.debug(f"Request body: {body}")
{% endif %}
        try:
            {%- if method|lower == 'get' and not path_params %}
            result = {{ schema|lower|replace(' ', '_') }}_dao.get_all()
            {%- elif method|lower == 'post' and operation_type == 'insert' %}
            {{ schema|lower|replace(' ', '_') }}_body = json.loads(body)
            result = {{ schema|lower|replace(' ', '_') }}_dao.insert({{ schema|lower|replace(' ', '_') }}_body)
            {%- elif method|lower == 'post' and operation_type == 'update' %}
            {{ schema|lower|replace(' ', '_') }}_body = json.loads(body)
            result = {{ schema|lower|replace(' ', '_') }}_dao.update({{ path_params_snake_case[0] }}, **{{ schema|lower|replace(' ', '_') }}_body)
            {%- else %}
            # TODO: Implement {{ method|upper }} logic for {{ path }}
            raise NotImplementedError
            {%- endif %}

            self.context.logger.info("Successfully processed {{ method|upper }} request for {{ path }}")
            self.context.logger.debug(f"Result: {result}")
            return ApiHttpMessage(
                performative=ApiHttpMessage.Performative.RESPONSE,
                status_code={{ status_code }},
                status_text="{{ status_text }}",
                headers={{ headers }},
                version=message.version,
                body=result
            )
{% for error_code, error_info in error_responses.items() %}
        except {{ error_info.exception }}:
            self.context.logger.exception("{{ error_info.message }}")
            return ApiHttpMessage(
                performative=ApiHttpMessage.Performative.RESPONSE,
                status_code={{ error_code }},
                headers={{ headers }},
                version=message.version,
                status_text="{{ error_info.status_text }}",
                body=json.dumps({"error": "{{ error_info.message }}"}).encode("utf-8")
            )
{% endfor %}
        except Exception as e:
            self.context.logger.exception("Unhandled exception")
            return ApiHttpMessage(
                performative=ApiHttpMessage.Performative.RESPONSE,
                status_code=500,
                headers={{ headers }},
                version=message.version,
                status_text="Internal Server Error",
                body={"error": str(e)},
            )
