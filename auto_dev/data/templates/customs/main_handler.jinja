    def handle(self, message: HttpMessage) -> None:
        """Handle incoming HTTP messages."""
        method = message.method.lower()
        url = message.url
        body = message.body

        path_parts = url.split("/")
        path = "/" + "/".join(path_parts[1:])

        if "{{ '{{' }}" in path:
            id_index = path_parts.index([part for part in path_parts if "{{ '{{' }}" in part][0])
            id = path_parts[id_index]
            path = "/" + "/".join(path_parts[1:id_index] + ["{{ '{{' }}" + path_parts[id_index][1:-1] + "{{ '}}' }}"] + path_parts[id_index + 1:])

        handler_method = getattr(self, f"handle_{method.lower()}_{path.lstrip('/').replace('/', '_').replace('{{ '{{' }}', '').replace('{{ '}}' }}', '')}", None)

        if handler_method:
            kwargs = {"body": body} if method.lower() in {"post", "put", "patch", "delete"} else {}
            if "{{ '{{' }}" in path:
                kwargs["id"] = id
            return handler_method(**kwargs)

        return self.handle_unexpected_message(message)

{{ all_methods }}

{{ unexpected_message_handler }}