from hypothesis import given
from hypothesis import strategies as st
import pytest

from {{ message_path }} import {{ messages_pb2 }}

from {{ import_path }} import ( 
    min_int32,
    max_int32,
    min_uint32,
    max_uint32,
    min_int64,
    max_int64,
    min_uint64,
    max_uint64,
    min_float32,
    max_float32,
    min_float64,
    max_float64,
    {%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
    {{ enum.name }},
    {%- endfor %}
    {%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
    {{ message.name }},
    {%- endfor %}
)

{#- Primitive type mappings to hypothesis strategies #}
{%- set scalar_map = {
    "double": "st.floats(min_value=min_float64, max_value=max_float64, allow_nan=False, allow_infinity=False, width=64)",
    "float": "st.floats(min_value=min_float32, max_value=max_float32, allow_nan=False, allow_infinity=False, width=32)",
    "int32": "st.integers(min_value=min_int32, max_value=max_int32)",
    "int64": "st.integers(min_value=min_int64, max_value=max_int64)",
    "uint32": "st.integers(min_value=min_uint32, max_value=max_uint32)",
    "uint64": "st.integers(min_value=min_uint64, max_value=max_uint64)",
    "sint32": "st.integers(min_value=min_int32, max_value=max_int32)",
    "sint64": "st.integers(min_value=min_int64, max_value=max_int64)",
    "fixed32": "st.integers(min_value=min_uint32, max_value=max_uint32)",
    "fixed64": "st.integers(min_value=min_uint64, max_value=max_uint64)",
    "sfixed32": "st.integers(min_value=min_int32, max_value=max_int32)",
    "sfixed64": "st.integers(min_value=min_int64, max_value=max_int64)",
    "bool": "st.booleans()",
    "string": "st.text()",
    "bytes": "st.binary()",
} %}
{#-#}

{# Define a list of enum names #}
{%- set enum_names = [] %}
{%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
{%- set enum_names = enum_names.append( enum.name ) %}
{%- endfor %}

{%- macro scalar_strategy(field) -%}
    {%- if field.type in enum_names -%}
        {{ field.type|lower }}_strategy
    {%- else -%}
        {{ scalar_map.get(field.type, field.type) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro optional_strategy(field) -%}
    st.one_of(st.none(), {{ scalar_strategy(field) }})
{%- endmacro -%}

{%- macro repeated_strategy(field) -%}
    st.lists({{ scalar_strategy(field) }})
{%- endmacro -%}

{%- macro message_strategy(message, prefix="") -%}
{#- Build a list of nested message names in this message -#}
{%- set nested_names = [] -%}
{%- for m in message.elements if m.__class__.__name__ == "Message" %}
{%- set enum_names = nested_names.append(m.name) %}
{%- endfor %}

{#- Generate strategies for inner messages first -#}
{%- for element in message.elements if element.__class__.__name__ == "Message" %}
{{ message_strategy(element, prefix + message.name + ".") }}
{%- endfor %}

{{ message.name|lower }}_strategy = st.builds(
    {{ prefix }}{{ message.name }},
    {%- for element in message.elements if element.__class__.__name__ == "Field" %}
        {%- if element.type in nested_names %}
        {{ element.name }}={{ element.type|lower }}_strategy,
        {%- elif element.cardinality == "OPTIONAL" %}
        {{ element.name }}={{ optional_strategy(element) }},
        {%- elif element.cardinality == "REPEATED" %}
        {{ element.name }}={{ repeated_strategy(element) }},
        {%- else %}
        {{ element.name }}={{ scalar_strategy(element) }},
        {%- endif %}
    {%- endfor %}
)
{%- endmacro %}

{# Define strategies for Enums at the top level #}
{%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
{{ enum.name|lower }}_strategy = st.sampled_from({{ enum.name }})
{%- endfor %}

{# Define strategies for each message #}
{%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
{{ message_strategy(message) }}
{%- endfor %}

{# Define tests for each message #}
{%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
@given({{ message.name|lower }}_strategy)
def test_{{ message.name|lower }}({{ message.name|lower }}: {{ message.name }}):
    assert isinstance({{ message.name|lower }}, {{ message.name }})
    proto_obj = {{ messages_pb2 }}.{{ message.name }}()
    {{ message.name|lower }}.encode(proto_obj, {{ message.name|lower }})
    result = {{ message.name }}.decode(proto_obj)
    assert id({{ message.name|lower }}) != id(result)
    assert {{ message.name|lower }} == result
{%- endfor %}
