from hypothesis import given
from hypothesis import strategies as st

from {{ message_path }} import {{ messages_pb2 }}

from {{ primitives_import_path }} import (
    {%- for primitive in float_primitives %}
    {{ primitive.__name__ }},
    {%- endfor %}
    {%- for primitive in integer_primitives %}
    {{ primitive.__name__ }},
    {%- endfor %}
)
from {{ models_import_path }} import (
    {%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
    {{ enum.name }},
    {%- endfor %}
    {%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
    {{ message.name }},
    {%- endfor %}
)

{# Register strategies for floating-point types #}
{%- for primitive in float_primitives %}
st.register_type_strategy(
    {{ primitive.__name__ }},
    st.floats(min_value={{ primitive.__name__ }}.min(), max_value={{ primitive.__name__ }}.max(),  allow_nan=False, allow_infinity=False).map({{ primitive.__name__ }})
)
{%- endfor %}
{# Register strategies for integer types #}
{%- for primitive in integer_primitives %}
st.register_type_strategy(
    {{ primitive.__name__ }},
    st.integers(min_value={{ primitive.__name__ }}.min(), max_value={{ primitive.__name__ }}.max()).map({{ primitive.__name__ }})
)
{%- endfor %}

{#- Define a map of scalars -#}
{%- set scalar_map = {"bool": "bool", "string": "str", "bytes": "bytes"} %}
{%- for primitive in integer_primitives + float_primitives %}
    {%- set scalar_map = scalar_map.update({primitive.__name__.lower(): primitive.__name__}) %}
{%- endfor %}

{# Define a list of enum names #}
{%- set enum_names = [] %}
{%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
{%- set enum_names = enum_names.append( enum.name ) %}
{%- endfor %}

{%- macro scalar_strategy(field) -%}
    {%- if field.type in enum_names -%}
        {{ field.type|lower }}_strategy
    {%- else -%}
        st.builds({{ scalar_map.get(field.type, field.type) }})
    {%- endif -%}
{%- endmacro -%}

{%- macro optional_strategy(field) -%}
    st.one_of(st.none(), {{ scalar_strategy(field) }})
{%- endmacro -%}

{%- macro repeated_strategy(field) -%}
    st.lists({{ scalar_strategy(field) }})
{%- endmacro -%}

{%- macro message_strategy(message, prefix="") -%}
{#- Build a list of nested message names in this message -#}
{%- set nested_names = [] -%}
{%- for m in message.elements if m.__class__.__name__ == "Message" %}
{%- set enum_names = nested_names.append(m.name) %}
{%- endfor %}

{#- Generate strategies for inner messages first -#}
{%- for element in message.elements if element.__class__.__name__ == "Message" %}
{{ message_strategy(element, prefix + message.name + ".") }}
{%- endfor %}

{{ message.name|lower }}_strategy = st.builds(
    {{ prefix }}{{ message.name }},
    {%- for element in message.elements if element.__class__.__name__ == "Field" %}
        {%- if element.type in nested_names %}
        {{ element.name }}={{ element.type|lower }}_strategy,
        {%- elif element.cardinality == "OPTIONAL" %}
        {{ element.name }}={{ optional_strategy(element) }},
        {%- elif element.cardinality == "REPEATED" %}
        {{ element.name }}={{ repeated_strategy(element) }},
        {%- else %}
        {{ element.name }}={{ scalar_strategy(element) }},
        {%- endif %}
    {%- endfor %}
)
{%- endmacro %}

{# Define strategies for Enums at the top level #}
{%- for enum in result.file_elements if enum.__class__.__name__ == "Enum" %}
{{ enum.name|lower }}_strategy = st.sampled_from({{ enum.name }})
{%- endfor %}

{# Define strategies for each message #}
{%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
{{ message_strategy(message) }}
{%- endfor %}

{# Define tests for each message #}
{%- for message in result.file_elements if message.__class__.__name__ == "Message" %}
@given({{ message.name|lower }}_strategy)
def test_{{ message.name|lower }}({{ message.name|lower }}: {{ message.name }}):
    assert isinstance({{ message.name|lower }}, {{ message.name }})
    proto_obj = {{ messages_pb2 }}.{{ message.name }}()
    {{ message.name|lower }}.encode(proto_obj, {{ message.name|lower }})
    result = {{ message.name }}.decode(proto_obj)
    assert id({{ message.name|lower }}) != id(result)
    assert {{ message.name|lower }} == result
{%- endfor %}
