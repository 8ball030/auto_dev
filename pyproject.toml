[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0", "setuptools"]

[tool.poetry]
name = "autonomy_dev"
version = "0.2.70"
homepage = "https://github.com/8ball030/auto_dev"
description = "A collection of tooling to enable open source development of autonomy tools"
authors = ["8Baller <8ball030@gmail.com>"]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
[[tool.poetry.packages]]
include = "auto_dev"

[[tool.poetry.packages]]
include = "tests"
format = "sdist"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py37", "py38", "py39"]
include = "\\.pyi?$"
exclude = "/(\n    \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
open-autonomy = "==0.15.2"
open-aea-test-autonomy = "==0.15.2"
open-aea-ledger-ethereum = "==1.55.0"
open-aea-ledger-solana = "==1.55.0"
open-aea-ledger-cosmos = "==1.55.0"
open-aea-cli-ipfs = "==1.55.0"
web3 = "<7,>=6.0.0"
ipfshttpclient = "==0.8.0a2"
typing_extensions = ">=3.10.0.2"
protobuf = "<4.25.0,>=4.21.6"
hypothesis = "==6.111.0"
toml = "==0.10.2"
tomte = {version = "==0.2.17", extras = ["cli", "tests", "ledgers", "black"]}

py-multibase = "==1.0.3"
py-multicodec = "==0.2.1"
py-eth-sig-utils = "*"
grpcio = "==1.65.4"
asn1crypto = "<1.5.0,>=1.4.0"

eth-utils = "==2.3.1"
eth-abi = "==5.1.0"
pycryptodome = "==3.20.0"

autoflake8 = "^0.4.1"
rich-click = "^1.8.2"
tbump = "^6.11.0"
requests = "2.28.1"
pytest-xdist = "^3.6.1"

mkdocstrings = {extras = ["python"], version = "^0.25.2"}
[tool.poetry.dev-dependencies]
responses = "^0.23.1"
mkdocs = "^1.6.0"
mkdocs-include-markdown-plugin = "^3.6.1"
mkdocs-material = "^9.5.31"
mkdocstrings-python = "^1.10.7"
twine = "^5.1.1"
mkdocs-autorefs = "^1.0.1"

[tool.poetry.extras]
all = [
  "pytest",
  "tbump",
  "black",
  "isort",
  "mypy",
  "pylama",
  "pylint",
  "autoflake8",
  "pytest-cov",
]
dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml", "tbump"]
doc = [
  "mkdocs",
  "mkdocs-include-markdown-plugin",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocs-material-extension",
  "mkdocs-autorefs",
]

[tool.poetry.scripts]
adev = "auto_dev.cli:cli"

[tool.poetry.dependencies.pylama]
extras = ["all"]
version = "^8.4.1"





[tool.ruff]
line-length = 120
indent-width = 4
fix = true
preview = false
show-fixes = false
respect-gitignore = true
exclude = []
output-format = "grouped"
target-version = "py311"
required-version = ">=0.3.2"


[tool.ruff.format]
indent-style = "space"
quote-style = "double"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 100
skip-magic-trailing-comma = false


[tool.ruff.lint]
preview = true
ignore = [ "D203", "D213", "D417",]
task-tags = [ "TODO", "FIXME",]
logger-objects = []
allowed-confusables = []
typing-modules = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = [ "ALL",]
unfixable = []
select = [ "F", "E", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "ASYNC", "TRIO", "S", "BLE", "FBT", "B", "A", "COM", "CPY", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF",]


[tool.ruff.lint.flake8-annotations]
mypy-init-return = true


[tool.ruff.lint.flake8-bandit]
check-typed-exception = true


[tool.ruff.lint.flake8-copyright]
notice-rgx = "(?i)Copyright\\s+((?:\\(C\\)|Â©)\\s+)?\\d{4}([-,]\\d{4})*"


[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"statsmodels.api" = "sm"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = [ "typing", "typing_extensions",]
runtime-evaluated-base-classes = [ "pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase",]
runtime-evaluated-decorators = [ "pydantic.validate_call", "attrs.define",]
quote-annotations = false


[tool.ruff.lint.isort]
length-sort = true
order-by-type = true
lines-after-imports = 2
combine-as-imports = true
force-wrap-aliases = true


[tool.ruff.lint.mccabe]
max-complexity = 10


[tool.ruff.lint.pep8-naming]
ignore-names = []
classmethod-decorators = [ "pydantic.validator", "declared_attr", "expression", "comparator",]
staticmethod-decorators = []


[tool.ruff.lint.pylint]
max-args = 5
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-nested-blocks = 3
max-positional-args = 3
max-public-methods = 20
max-returns = 6
max-statements = 50


[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true